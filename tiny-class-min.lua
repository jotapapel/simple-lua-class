function class(a)local class=setmetatable({prototype=a},{__index=a})class.constructor=function(self,...)end;class.id=function(self,b)return tostring(b):sub(8)end;class.new=function(self,...)local c={}local d=setmetatable({class=self,id=self.id and self:id(c)or nil},{__index=self.prototype})local a=setmetatable(c,{__index=d})local b=setmetatable({},{__index=a,__tostring=function()return'object: '..tostring(a):sub(8)end,__newindex=function(self,e,f)pcall(not({class=1,id=1})[e]and rawset,self,e,f)end})if self.constructor then self.constructor(b,...)end;return b end;class.implement=function(self,a,g)local a=setmetatable(a,{__index=(g or false)and getmetatable(self).__index or self.prototype})if g or false then local h=getmetatable(self).__index;setmetatable(self,{__index=a})else rawset(self,'prototype',a)end end;class.extend=function(self,a)local a=setmetatable(a,{__index=self.prototype})local class=setmetatable({prototype=a,super=self},{__index=self})return setmetatable({},{__index=class,__tostring=function()return'class: '..tostring(class):sub(8)end,__newindex=function(self,e,f)pcall(not({prototype=1,new=1,implement=1,extend=1,super=1})[e]and rawset,self,e,f)end})end;return setmetatable({},{__index=class,__tostring=function()return'class: '..tostring(class):sub(8)end,__newindex=function(self,e,f)pcall(not({prototype=1,new=1,implement=1,extend=1})[e]and rawset,self,e,f)end})end
